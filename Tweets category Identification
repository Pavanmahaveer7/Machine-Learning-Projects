{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "provenance": [],
   "authorship_tag": "ABX9TyMybgisVeyGM+2Km8f1LRds"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "f8590f16a7b843e8885d1680133c108d": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "model_module_version": "1.5.0",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_ddbb58a283e449c2bd40a9055d55bc41",
       "IPY_MODEL_6be09652ceb8407dbf5e6afc04fceb69",
       "IPY_MODEL_439de7cf31694a0e8617c67d27a47737"
      ],
      "layout": "IPY_MODEL_68cfd1c43a5b493fbae36709c4ca8066"
     }
    },
    "ddbb58a283e449c2bd40a9055d55bc41": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "model_module_version": "1.5.0",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_ee9452fadb284edf86a14110412f5572",
      "placeholder": "​",
      "style": "IPY_MODEL_651288b0fa6c45fc8ecdedfb530aee77",
      "value": "Done! Use &#x27;show&#x27; commands to display/save.   "
     }
    },
    "6be09652ceb8407dbf5e6afc04fceb69": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "model_module_version": "1.5.0",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_c39c495118af4d989955e873a585e8e7",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_c26cf154bf4b4350ac9b1837aa3a8875",
      "value": 1
     }
    },
    "439de7cf31694a0e8617c67d27a47737": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "model_module_version": "1.5.0",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_85e76b78d076416fb7d304dca6baefcc",
      "placeholder": "​",
      "style": "IPY_MODEL_d3c08b99e2184af5b36f546609a31a4c",
      "value": " [100%]   00:00 -&gt; (00:00 left)"
     }
    },
    "68cfd1c43a5b493fbae36709c4ca8066": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "model_module_version": "1.2.0",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": "inline-flex",
      "flex": null,
      "flex_flow": "row wrap",
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": "100%"
     }
    },
    "ee9452fadb284edf86a14110412f5572": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "model_module_version": "1.2.0",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "651288b0fa6c45fc8ecdedfb530aee77": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "model_module_version": "1.5.0",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "c39c495118af4d989955e873a585e8e7": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "model_module_version": "1.2.0",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": "2",
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "c26cf154bf4b4350ac9b1837aa3a8875": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "model_module_version": "1.5.0",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "85e76b78d076416fb7d304dca6baefcc": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "model_module_version": "1.2.0",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "d3c08b99e2184af5b36f546609a31a4c": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "model_module_version": "1.5.0",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    }
   }
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "source": [
    "!pip install sweetviz"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "uuNq22kvzi69",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702749964141,
     "user_tz": 360,
     "elapsed": 10233,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "c7fcdc0c-0e19-42be-96e2-5a33ef9eba42"
   },
   "execution_count": 2,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Collecting sweetviz\n",
      "  Downloading sweetviz-2.3.1-py3-none-any.whl (15.1 MB)\n",
      "\u001B[2K     \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m15.1/15.1 MB\u001B[0m \u001B[31m49.8 MB/s\u001B[0m eta \u001B[36m0:00:00\u001B[0m\n",
      "\u001B[?25hRequirement already satisfied: pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (1.5.3)\n",
      "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (1.23.5)\n",
      "Requirement already satisfied: matplotlib>=3.1.3 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (3.7.1)\n",
      "Requirement already satisfied: tqdm>=4.43.0 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (4.66.1)\n",
      "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (1.11.4)\n",
      "Requirement already satisfied: jinja2>=2.11.1 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (3.1.2)\n",
      "Requirement already satisfied: importlib-resources>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from sweetviz) (6.1.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=2.11.1->sweetviz) (2.1.3)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (4.46.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (1.4.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (23.2)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (9.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (3.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.1.3->sweetviz) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3->sweetviz) (2023.3.post1)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.1.3->sweetviz) (1.16.0)\n",
      "Installing collected packages: sweetviz\n",
      "Successfully installed sweetviz-2.3.1\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import sweetviz as sv\n",
    "import pandas as pd\n",
    "\n",
    "# Load your dataset (replace 'your_dataset.csv' with your file path)\n",
    "data = pd.read_csv('/content/train.csv')\n",
    "\n",
    "# Analyze the dataset and generate a report\n",
    "report = sv.analyze([data, 'Tweets data'])\n",
    "\n",
    "# Show the report in the default web browser\n",
    "report.show_html()\n",
    "\n",
    "# Save the report as an HTML file\n",
    "report.show_html('sweetviz_report.html')\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 104,
     "referenced_widgets": [
      "f8590f16a7b843e8885d1680133c108d",
      "ddbb58a283e449c2bd40a9055d55bc41",
      "6be09652ceb8407dbf5e6afc04fceb69",
      "439de7cf31694a0e8617c67d27a47737",
      "68cfd1c43a5b493fbae36709c4ca8066",
      "ee9452fadb284edf86a14110412f5572",
      "651288b0fa6c45fc8ecdedfb530aee77",
      "c39c495118af4d989955e873a585e8e7",
      "c26cf154bf4b4350ac9b1837aa3a8875",
      "85e76b78d076416fb7d304dca6baefcc",
      "d3c08b99e2184af5b36f546609a31a4c"
     ]
    },
    "id": "Vb4smQHJ_BzM",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702750001160,
     "user_tz": 360,
     "elapsed": 2604,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "78661997-1a1b-41c4-c14c-6468620b1f6d"
   },
   "execution_count": 4,
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "                                             |          | [  0%]   00:00 -> (? left)"
      ],
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "f8590f16a7b843e8885d1680133c108d"
      }
     },
     "metadata": {}
    },
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Report SWEETVIZ_REPORT.html was generated! NOTEBOOK/COLAB USERS: the web browser MAY not pop up, regardless, the report IS saved in your notebook/colab files.\n",
      "Report sweetviz_report.html was generated! NOTEBOOK/COLAB USERS: the web browser MAY not pop up, regardless, the report IS saved in your notebook/colab files.\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "# Load your dataset (replace 'your_dataset.csv' with your file path)\n",
    "data = pd.read_csv('/content/train.csv')\n",
    "\n",
    "# Function to clean text data\n",
    "def clean_text(text):\n",
    "    # Remove special characters, links, emojis, etc.\n",
    "    text = re.sub(r'http\\S+', '', text)  # Remove links\n",
    "    text = re.sub(r'[^a-zA-Z\\s]', '', text)  # Remove special characters except whitespace\n",
    "    # Add more cleaning steps as needed\n",
    "\n",
    "    return text\n",
    "\n",
    "# Apply cleaning function to the 'text' column\n",
    "data['text'] = data['text'].apply(clean_text)\n",
    "\n",
    "# Display the cleaned text data\n",
    "print(data['text'].head(10))\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oOct1hHUCa9T",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760696752,
     "user_tz": 360,
     "elapsed": 151,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "510ea92f-eca4-40d9-d8b8-a69fa7e736e6"
   },
   "execution_count": 35,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "0    Our Deeds are the Reason of this earthquake Ma...\n",
      "1                Forest fire near La Ronge Sask Canada\n",
      "2    All residents asked to shelter in place are be...\n",
      "3     people receive wildfires evacuation orders in...\n",
      "4    Just got sent this photo from Ruby Alaska as s...\n",
      "5    RockyFire Update  California Hwy  closed in bo...\n",
      "6    flood disaster Heavy rain causes flash floodin...\n",
      "7    Im on top of the hill and I can see a fire in ...\n",
      "8    Theres an emergency evacuation happening now i...\n",
      "9     Im afraid that the tornado is coming to our area\n",
      "Name: text, dtype: object\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "data.head()\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "Ulxbhu0f7TKK",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760699970,
     "user_tz": 360,
     "elapsed": 145,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "07607e8d-40ad-46b5-b7cf-9979e42be969"
   },
   "execution_count": 36,
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "   id keyword location                                               text  \\\n",
       "0   1     NaN      NaN  Our Deeds are the Reason of this earthquake Ma...   \n",
       "1   4     NaN      NaN              Forest fire near La Ronge Sask Canada   \n",
       "2   5     NaN      NaN  All residents asked to shelter in place are be...   \n",
       "3   6     NaN      NaN   people receive wildfires evacuation orders in...   \n",
       "4   7     NaN      NaN  Just got sent this photo from Ruby Alaska as s...   \n",
       "\n",
       "   target  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ],
      "text/html": [
       "\n",
       "  <div id=\"df-39dfece0-2a23-463e-930a-2b059b8811a7\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>keyword</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Our Deeds are the Reason of this earthquake Ma...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Forest fire near La Ronge Sask Canada</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>All residents asked to shelter in place are be...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>people receive wildfires evacuation orders in...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Just got sent this photo from Ruby Alaska as s...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39dfece0-2a23-463e-930a-2b059b8811a7')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-39dfece0-2a23-463e-930a-2b059b8811a7 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-39dfece0-2a23-463e-930a-2b059b8811a7');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-f47c83c4-c7e8-4d83-815c-f9c7f31aedf4\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f47c83c4-c7e8-4d83-815c-f9c7f31aedf4')\"\n",
       "            title=\"Suggest charts\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-f47c83c4-c7e8-4d83-815c-f9c7f31aedf4 button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ]
     },
     "metadata": {},
     "execution_count": 36
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "# Check for missing/null values in each column\n",
    "null_values = data.isnull().sum()\n",
    "\n",
    "# Display columns with missing/null values and their counts\n",
    "print(\"Columns with Missing/Null Values:\")\n",
    "print(null_values[null_values > 0])\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UN183N9QCbJE",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760702621,
     "user_tz": 360,
     "elapsed": 156,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "3ef2e511-329a-4cc2-c27d-08297cbad104"
   },
   "execution_count": 37,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Columns with Missing/Null Values:\n",
      "keyword       61\n",
      "location    2533\n",
      "dtype: int64\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "# Assuming 'cleaned_text' contains the cleaned text data\n",
    "cleaned_text = data['text']\n",
    "\n",
    "# Initialize the TF-IDF Vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # Adjust max_features as needed\n",
    "\n",
    "# Fit and transform the cleaned text data\n",
    "tfidf_features = tfidf_vectorizer.fit_transform(cleaned_text)\n",
    "\n",
    "# Convert to DataFrame (optional)\n",
    "tfidf_df = pd.DataFrame(tfidf_features.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\n",
    "\n",
    "# Display the TF-IDF features DataFrame\n",
    "print(tfidf_df.head())\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JmcH8eYlDAi3",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760705324,
     "user_tz": 360,
     "elapsed": 620,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "6b372a9a-3001-4c86-9931-6e584e61c1ef"
   },
   "execution_count": 38,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "    aa  aba  abandon  abandoned  abbswinston  abc  abcnews  abe  ability  \\\n",
      "0  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
      "1  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
      "2  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
      "3  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
      "4  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
      "\n",
      "   ablaze  ...   yr  yrs  yugvani  yyc  zakbagans  zayn  zionist  zombie  \\\n",
      "0     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
      "1     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
      "2     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
      "3     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
      "4     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
      "\n",
      "   zone  zouma  \n",
      "0   0.0    0.0  \n",
      "1   0.0    0.0  \n",
      "2   0.0    0.0  \n",
      "3   0.0    0.0  \n",
      "4   0.0    0.0  \n",
      "\n",
      "[5 rows x 5000 columns]\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "tfidf_df.head(10)"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 412
    },
    "id": "TFWH41yK3seI",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760708278,
     "user_tz": 360,
     "elapsed": 138,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "26a351d8-0fac-4860-ade6-47ef53a164b1"
   },
   "execution_count": 39,
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "    aa  aba  abandon  abandoned  abbswinston  abc  abcnews  abe  ability  \\\n",
       "0  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "1  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "2  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "3  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "4  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "5  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "6  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "7  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "8  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "9  0.0  0.0      0.0        0.0          0.0  0.0      0.0  0.0      0.0   \n",
       "\n",
       "   ablaze  ...   yr  yrs  yugvani  yyc  zakbagans  zayn  zionist  zombie  \\\n",
       "0     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "1     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "2     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "3     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "4     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "5     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "6     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "7     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "8     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "9     0.0  ...  0.0  0.0      0.0  0.0        0.0   0.0      0.0     0.0   \n",
       "\n",
       "   zone  zouma  \n",
       "0   0.0    0.0  \n",
       "1   0.0    0.0  \n",
       "2   0.0    0.0  \n",
       "3   0.0    0.0  \n",
       "4   0.0    0.0  \n",
       "5   0.0    0.0  \n",
       "6   0.0    0.0  \n",
       "7   0.0    0.0  \n",
       "8   0.0    0.0  \n",
       "9   0.0    0.0  \n",
       "\n",
       "[10 rows x 5000 columns]"
      ],
      "text/html": [
       "\n",
       "  <div id=\"df-13af70c6-6738-4dcd-8d8b-ae3e5a41ce38\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aa</th>\n",
       "      <th>aba</th>\n",
       "      <th>abandon</th>\n",
       "      <th>abandoned</th>\n",
       "      <th>abbswinston</th>\n",
       "      <th>abc</th>\n",
       "      <th>abcnews</th>\n",
       "      <th>abe</th>\n",
       "      <th>ability</th>\n",
       "      <th>ablaze</th>\n",
       "      <th>...</th>\n",
       "      <th>yr</th>\n",
       "      <th>yrs</th>\n",
       "      <th>yugvani</th>\n",
       "      <th>yyc</th>\n",
       "      <th>zakbagans</th>\n",
       "      <th>zayn</th>\n",
       "      <th>zionist</th>\n",
       "      <th>zombie</th>\n",
       "      <th>zone</th>\n",
       "      <th>zouma</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 5000 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13af70c6-6738-4dcd-8d8b-ae3e5a41ce38')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-13af70c6-6738-4dcd-8d8b-ae3e5a41ce38 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-13af70c6-6738-4dcd-8d8b-ae3e5a41ce38');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-f613b6c3-30b4-48ea-a85d-2756f2976f56\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f613b6c3-30b4-48ea-a85d-2756f2976f56')\"\n",
       "            title=\"Suggest charts\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-f613b6c3-30b4-48ea-a85d-2756f2976f56 button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ]
     },
     "metadata": {},
     "execution_count": 39
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Count the occurrences of each value in the 'target' column\n",
    "target_counts = data['target'].value_counts()\n",
    "\n",
    "# Define labels and sizes for the pie chart\n",
    "labels = ['Not Disaster (0)', 'Disaster (1)']\n",
    "sizes = [target_counts[0], target_counts[1]]\n",
    "\n",
    "# Define custom colors for the pie chart\n",
    "colors = ['#FF6347', '#1E90FF']  # Custom colors for 0 and 1 respectively\n",
    "\n",
    "# Create the pie chart\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n",
    "plt.title('Distribution of Tweets by Target')\n",
    "plt.show()\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 519
    },
    "id": "GtdkYEIM5wjh",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760712421,
     "user_tz": 360,
     "elapsed": 306,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "83d3cc09-8135-4164-a660-00fa5ae7cd9c"
   },
   "execution_count": 40,
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ],
      "image/png": "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W9i8eTNdunThgw8+sB3H5bPPPqN3794sW7aMTz/9lLi4ON555x3efPNN29HEzWk4WkRExBLtCYuIiFiiEhYREbFEJSwiImKJSlhERMQSlbCIiIglKmERERFLVMIiIiKWqIRFREQsUQmLiIhYohIWERGxRCUsIiJiiUpYRETEEpWwiIiIJSphERERS1TCIiIilqiERURELFEJi4iIWKISFhERsUQlLCIiYolKWERExBKVsIiIiCUqYREREUtUwiIiIpaohEVERCxRCYuIiFiiEhYREbFEJSwiImKJSlhERMQSlbCIiIglKmERERFLVMIiIiKWqIRFREQsUQmLiIhYohIWERGxRCUsIiJiiUpYRETEEpWwiIiIJSphERERS1TCIiIilqiERURELFEJi4iIWKISFhERsUQlLCIiYolKWERExBKVsIiIiCUqYREREUtUwiIiIpaohEVERCxRCYuI+IjZs2fz0UcfnffzkydPZvHixcWYSFTCIiKXacGCBTgcDhwOB1FRUfTo0YPt27cDkJGRQYUKFVi2bFmhfr/33nvvqu7jl19+4ZFHHqF169YAbNy4kTFjxtCoUSPXNu3ataNv375s2bLlqr6XXLoA2wFEfFl2LhxIhX2pkJQCJzIhKwcys51/ZuVA5umPrDM+Cvp8Ti6EBUJEkPMj8vRHRBBEBp9x2xl/P/NPh8P2s+F59uzZQ1paGmPHjqVNmzasW7eOqKgodu7cib+/f6F9nwULFjB37lzuv//+S9reGIPjrB/oyJEjefLJJylXrhzffPMNffv2pWrVquzZs8e1Tc2aNRk0aBCjR49m1qxZhZZfzs9hjDG2Q4h4I2PgYLqzXPelQFLquX8eSoMcN/gf6ADiw6ByCagSDZWjocrpv1eJhqhgq/HczoIFC2jXrh0pKSlERESQlpZG+fLlefHFFxk4cCCRkZHMnz+fG2+8kYceeoj//ve/hISE8Pjjj/PEE0+wf/9+hg8fzvz58ylRogSvvPIKffr0ISkpiYEDB7J06VIqVKjAxIkTWb16NWPGjAGgVq1abNq0iZ9++omHHnqIPXv20LZtW6ZOncq6deto164d7du35/jx46xYscKVd/369TRs2JDDhw8THR3NsWPHCAkJ4eOPP2b06NEcPnzYte3atWtp1KgR+/fvp2TJksX+3Poa7QmLXKVDabDhMGw4BIlH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DBhAZmYmISHO2aHdunXjo48+IiMjg/vuu4/IyEgqV67Mv//9b8D5xqB58+bExcUxa9asfFmnTp3KHXfcQWBgIBkZGSxbtowhQ4ZQqVIl7rnnHhYtWuR6jjp16sS0adMK50kvahWugW79Ycw/YOJnMOp56HgHVKoGDv13KDYOP+cVizrdASOfg4mfwpOvO9dxVgGLDwmwHcCdTZ48mVtuuYUBAwbku33KlClMnTqV77//ntTUVG677TZq167N8uXLqVevHg8//DAjR4684H03adKE/fv3c+jQoXy3P/roo1x//fV8+eWXjB49mgkTJvD3v/+defPm8eqrr9KoUSPat2/PlClTGDp0KCNGjOC9997juuuuo1+/fnz++eccOHCA6OhoPvroI26//XaeffZZ1q9fz9q1a9m0aRM9evSgQ4cOAPj5+bF8+XLKly+fL8cvv/zi2os+ePAgAJGRkQCUKFGC9PR00tPTCQsLo2nTpueUuEcICYVrmzs/AFJTYPPvsOl32Lhal1ssTA4HlKsMtRs6P2peC+GRtlOJWKcSvoDrrruOkSNHMnz4cF5++WXX7V999RU9evSgWbNmAHTs2JH58+dz99134+fnR2hoKMHBwZf0Pc4e3u7SpQsffPABlSpV4qmnnnJ9jw4dOjBu3Dh2797NiRMnSEpKIioqitatWzN16lQyMjL4+uuvqVy5suu+wsPDCQwMZM6cOSQmJtKoUSMAsrKyWLduHQA33XQTVatWPSfXgQMHiI2NvWD2vOHrkiVLcviwF0x+ioh0nmfa9Ebnv48fge2JsHPL6Y8/IPmY3YyeIjLaObxcuZrzz+r1ICradioRt6MSvogXXniBL7/8kmeffdZ1W2BgIH5nXPbsSg6rr1y5ktKlS1OqVKl8tz/77LPccccdfP311/To0YPhw4dz9913M3jwYF577TW6detG//79Xd/zp59+YuHChXz99dfUq1eP2bNnc/PNN+e7T4fDwV133cUzzzzjuq106QuvoRsUFER6unNVqvj4eACOHz8OQHJyMhEREYSGhgKQmZnp+rtXiY6Dxi2dH3mOHYYdW1TMZyoRe7pwq5/+qOGc0SwiF6USvojw8HDeffddbr31VtdtnTp14plnnmHYsGGkp6fz448/8v777wPO477btm0jOTmZqKiofPeVmZnJwYMHWbRoEa+99hpPPfVUvslQOTk5lC5dmuHDhzNs2DBWrFjBzz//TK9evcjNzaVmzZocOnSI7du3c+ONN/Lbb7/RokULPv/8cx5++GFmzpzJr7/+ys0330xQUBBbtmwhLS2Njh07Mm3aNIYOHUpoaCivvPIKU6ZMueDjrlatGklJSQCEhYXRrFkzpkyZQuXKlfnggw9o27ata9t9+/YVuDftlWLinR9nF/O+Xc6FQw7udf55YB8c3u89V4IKCIT4MlCqrHOWed5HxarOEhaRK6ISvgSdOnVi4MCBzJgxA4AhQ4awZcsWbr31VnJycnj00Ue58847Abj33nt57rnnKFeuHKNHj853P5MmTeKdd96hatWqPPfcc+ec2uPv78/06dMZNWoUr7zyCvXq1WPy5MnUq1eP0aNHc+edd1K1alUqVapEUlISTZo04bnnnmPo0KGkpaXRrl07HnjgAQDuu+8+nnrqKcqXL8/48eM5duwYXbt2xeFwcP/99190z7VDhw4sXrzYNXv7/fffZ8iQIdSpU4cmTZrkm4i1aNEi+vbtezVPsWfLK+Z6Z80Oz82FowdPl3MSHNjr/HfKCUg+DinHIT3V/rKbDgeEhkNkCedHidjThVvuf6UbU1IXvRcpAjpFSQq0bds2GjduzIYNG86ZtHWmtWvX0qFDBzZv3kx0dHTxBfQWOTnOMj6zmFNOQOoJyMyErAznlaTyPnKyITvb+WdOjvNPP38IDAT/AOefAWd8BAZCQBAEBDjXVI6M/l/Z5v09ooTz8yJS7FTCcl5vvfUWH3/8MQsXLixwoZKMjAxatmzJ+PHj6dGjh4WEIiKeTSUsF7Ro0SJat25d4OeMMSxevJibbrqpmFOJiHgHlbCIiIglmmkhIiJiiUpYRETEEpWwiIiIJSphERERS1TCIiIilqiERURELFEJi4iIWKISFhERsUQlLCIiYolKWERExBKVsIiIiCUqYREREUtUwiIiIpaohEVERCxRCYuIiFiiEhYREbFEJSwiImKJSlhERMQSlbCIiIglKmERERFLVMIiIiKWqIRFREQsUQmLiIhYohIWERGxRCUsIiJiiUpYRETEEpWwiIiIJSphERERS1TCIiIilqiERURELFEJi4iIWKISFhERsUQlLCIiYolKWERExBKVsIiIiCUqYREREUtUwiIiIpaohEVERCxRCYuIiFiiEhYREbFEJSwiImKJSlhERMQSlbCIiIglKmERERFLVMIiIiKWqIRFREQsUQmLiIhYohIWERGxRCUsIiJiiUpYRETEEpWwiIiIJSphERERS1TCIiIilvw/oh3o0DEQpB0AAAAASUVORK5CYII=\n"
     },
     "metadata": {}
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "# Assuming tfidf_df contains the TF-IDF DataFrame\n",
    "print(tfidf_df.info())\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "chNmT5IV7JUC",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760716111,
     "user_tz": 360,
     "elapsed": 494,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "cbcdefe5-a524-4694-c447-7b2f630ce2f5"
   },
   "execution_count": 41,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7613 entries, 0 to 7612\n",
      "Columns: 5000 entries, aa to zouma\n",
      "dtypes: float64(5000)\n",
      "memory usage: 290.4 MB\n",
      "None\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "print(tfidf_df.describe())"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 339
    },
    "id": "p2wHDV7d8P9Q",
    "executionInfo": {
     "status": "error",
     "timestamp": 1702760722867,
     "user_tz": 360,
     "elapsed": 5211,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "156cfa5a-8a42-4c34-f106-130b9a642a38"
   },
   "execution_count": 42,
   "outputs": [
    {
     "output_type": "error",
     "ename": "KeyboardInterrupt",
     "evalue": "ignored",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-42-2bb45e77ad5e>\u001B[0m in \u001B[0;36m<cell line: 1>\u001B[0;34m()\u001B[0m\n\u001B[0;32m----> 1\u001B[0;31m \u001B[0mprint\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mtfidf_df\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdescribe\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001B[0m in \u001B[0;36mdescribe\u001B[0;34m(self, percentiles, include, exclude, datetime_is_numeric)\u001B[0m\n\u001B[1;32m  10938\u001B[0m         \u001B[0mmax\u001B[0m            \u001B[0mNaN\u001B[0m      \u001B[0;36m3.0\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m  10939\u001B[0m         \"\"\"\n\u001B[0;32m> 10940\u001B[0;31m         return describe_ndframe(\n\u001B[0m\u001B[1;32m  10941\u001B[0m             \u001B[0mobj\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m  10942\u001B[0m             \u001B[0minclude\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0minclude\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/describe.py\u001B[0m in \u001B[0;36mdescribe_ndframe\u001B[0;34m(obj, include, exclude, datetime_is_numeric, percentiles)\u001B[0m\n\u001B[1;32m     99\u001B[0m         )\n\u001B[1;32m    100\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 101\u001B[0;31m     \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdescriber\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdescribe\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpercentiles\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mpercentiles\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    102\u001B[0m     \u001B[0;32mreturn\u001B[0m \u001B[0mcast\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mNDFrameT\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mresult\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    103\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/describe.py\u001B[0m in \u001B[0;36mdescribe\u001B[0;34m(self, percentiles)\u001B[0m\n\u001B[1;32m    179\u001B[0m         \u001B[0;32mfor\u001B[0m \u001B[0m_\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mseries\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mdata\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mitems\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    180\u001B[0m             \u001B[0mdescribe_func\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mselect_describe_func\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mseries\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdatetime_is_numeric\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 181\u001B[0;31m             \u001B[0mldesc\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mappend\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdescribe_func\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mseries\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mpercentiles\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    182\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    183\u001B[0m         \u001B[0mcol_names\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mreorder_columns\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mldesc\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/describe.py\u001B[0m in \u001B[0;36mdescribe_numeric_1d\u001B[0;34m(series, percentiles)\u001B[0m\n\u001B[1;32m    241\u001B[0m     d = (\n\u001B[1;32m    242\u001B[0m         \u001B[0;34m[\u001B[0m\u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcount\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmean\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mstd\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmin\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 243\u001B[0;31m         \u001B[0;34m+\u001B[0m \u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mquantile\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpercentiles\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtolist\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    244\u001B[0m         \u001B[0;34m+\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmax\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    245\u001B[0m     )\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001B[0m in \u001B[0;36mquantile\u001B[0;34m(self, q, interpolation)\u001B[0m\n\u001B[1;32m   2681\u001B[0m         \u001B[0mdf\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mto_frame\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2682\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 2683\u001B[0;31m         \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mdf\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mquantile\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0minterpolation\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mnumeric_only\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   2684\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mresult\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mndim\u001B[0m \u001B[0;34m==\u001B[0m \u001B[0;36m2\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2685\u001B[0m             \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mresult\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0miloc\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;36m0\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001B[0m in \u001B[0;36mquantile\u001B[0;34m(self, q, axis, numeric_only, interpolation, method)\u001B[0m\n\u001B[1;32m  11319\u001B[0m             \u001B[0;31m# error: Argument \"qs\" to \"quantile\" of \"BlockManager\" has incompatible type\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m  11320\u001B[0m             \u001B[0;31m# \"Index\"; expected \"Float64Index\"\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m> 11321\u001B[0;31m             res = data._mgr.quantile(\n\u001B[0m\u001B[1;32m  11322\u001B[0m                 \u001B[0mqs\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0maxis\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0minterpolation\u001B[0m  \u001B[0;31m# type: ignore[arg-type]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m  11323\u001B[0m             )\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001B[0m in \u001B[0;36mquantile\u001B[0;34m(self, qs, axis, interpolation)\u001B[0m\n\u001B[1;32m   1629\u001B[0m         \u001B[0mnew_axes\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m]\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mFloat64Index\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1630\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1631\u001B[0;31m         blocks = [\n\u001B[0m\u001B[1;32m   1632\u001B[0m             \u001B[0mblk\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mquantile\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0maxis\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0maxis\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mqs\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0minterpolation\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1633\u001B[0m             \u001B[0;32mfor\u001B[0m \u001B[0mblk\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mblocks\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001B[0m in \u001B[0;36m<listcomp>\u001B[0;34m(.0)\u001B[0m\n\u001B[1;32m   1630\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1631\u001B[0m         blocks = [\n\u001B[0;32m-> 1632\u001B[0;31m             \u001B[0mblk\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mquantile\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0maxis\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0maxis\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mqs\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0minterpolation\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1633\u001B[0m             \u001B[0;32mfor\u001B[0m \u001B[0mblk\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mblocks\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1634\u001B[0m         ]\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/blocks.py\u001B[0m in \u001B[0;36mquantile\u001B[0;34m(self, qs, interpolation, axis)\u001B[0m\n\u001B[1;32m   1333\u001B[0m         \u001B[0;32massert\u001B[0m \u001B[0mis_list_like\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# caller is responsible for this\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1334\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1335\u001B[0;31m         \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mquantile_compat\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_values\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1336\u001B[0m         \u001B[0;31m# ensure_block_shape needed for cases where we start with EA and result\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1337\u001B[0m         \u001B[0;31m#  is ndarray, e.g. IntegerArray, SparseArray\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/array_algos/quantile.py\u001B[0m in \u001B[0;36mquantile_compat\u001B[0;34m(values, qs, interpolation)\u001B[0m\n\u001B[1;32m     35\u001B[0m         \u001B[0mfill_value\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mna_value_for_dtype\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcompat\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     36\u001B[0m         \u001B[0mmask\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0misna\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 37\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mquantile_with_mask\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mmask\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mfill_value\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mqs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     38\u001B[0m     \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     39\u001B[0m         \u001B[0;32mreturn\u001B[0m \u001B[0mvalues\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_quantile\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minterpolation\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/array_algos/quantile.py\u001B[0m in \u001B[0;36mquantile_with_mask\u001B[0;34m(values, mask, fill_value, qs, interpolation)\u001B[0m\n\u001B[1;32m     93\u001B[0m         \u001B[0mresult\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mrepeat\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mflat\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mlen\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mreshape\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mlen\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mlen\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mqs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     94\u001B[0m     \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 95\u001B[0;31m         result = _nanpercentile(\n\u001B[0m\u001B[1;32m     96\u001B[0m             \u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     97\u001B[0m             \u001B[0mqs\u001B[0m \u001B[0;34m*\u001B[0m \u001B[0;36m100.0\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/array_algos/quantile.py\u001B[0m in \u001B[0;36m_nanpercentile\u001B[0;34m(values, qs, na_value, mask, interpolation)\u001B[0m\n\u001B[1;32m    214\u001B[0m         \u001B[0;32mreturn\u001B[0m \u001B[0mresult\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    215\u001B[0m     \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 216\u001B[0;31m         return np.percentile(\n\u001B[0m\u001B[1;32m    217\u001B[0m             \u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    218\u001B[0m             \u001B[0mqs\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001B[0m in \u001B[0;36mpercentile\u001B[0;34m(*args, **kwargs)\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py\u001B[0m in \u001B[0;36mpercentile\u001B[0;34m(a, q, axis, out, overwrite_input, method, keepdims, interpolation)\u001B[0m\n\u001B[1;32m   4164\u001B[0m     \u001B[0;32mif\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0m_quantile_is_valid\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   4165\u001B[0m         \u001B[0;32mraise\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"Percentiles must be in the range [0, 100]\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 4166\u001B[0;31m     return _quantile_unchecked(\n\u001B[0m\u001B[1;32m   4167\u001B[0m         a, q, axis, out, overwrite_input, method, keepdims)\n\u001B[1;32m   4168\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py\u001B[0m in \u001B[0;36m_quantile_unchecked\u001B[0;34m(a, q, axis, out, overwrite_input, method, keepdims)\u001B[0m\n\u001B[1;32m   4422\u001B[0m                         keepdims=False):\n\u001B[1;32m   4423\u001B[0m     \u001B[0;34m\"\"\"Assumes that q is in [0, 1], and is an ndarray\"\"\"\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 4424\u001B[0;31m     r, k = _ureduce(a,\n\u001B[0m\u001B[1;32m   4425\u001B[0m                     \u001B[0mfunc\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0m_quantile_ureduce_func\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   4426\u001B[0m                     \u001B[0mq\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py\u001B[0m in \u001B[0;36m_ureduce\u001B[0;34m(a, func, **kwargs)\u001B[0m\n\u001B[1;32m   3723\u001B[0m         \u001B[0mkeepdim\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0;36m1\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;34m*\u001B[0m \u001B[0ma\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mndim\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3724\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3725\u001B[0;31m     \u001B[0mr\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mfunc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0ma\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3726\u001B[0m     \u001B[0;32mreturn\u001B[0m \u001B[0mr\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkeepdim\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3727\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py\u001B[0m in \u001B[0;36m_quantile_ureduce_func\u001B[0;34m(a, q, axis, out, overwrite_input, method)\u001B[0m\n\u001B[1;32m   4590\u001B[0m             \u001B[0marr\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0ma\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mflatten\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   4591\u001B[0m         \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 4592\u001B[0;31m             \u001B[0marr\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0ma\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcopy\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   4593\u001B[0m     result = _quantile(arr,\n\u001B[1;32m   4594\u001B[0m                        \u001B[0mquantiles\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mq\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot a heatmap for the TF-IDF DataFrame\n",
    "sns.heatmap(tfidf_df.iloc[0:50, 0:50], cmap='viridis')  # Adjust rows/columns for visualization\n",
    "plt.title('TF-IDF Heatmap (Sample)')\n",
    "plt.show()\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 500
    },
    "id": "elLlyK7v8kmo",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702753636438,
     "user_tz": 360,
     "elapsed": 784,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "d891e49b-3214-4194-c20e-ef810bba9f95"
   },
   "execution_count": 22,
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ],
      "image/png": "\n"
     },
     "metadata": {}
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# Assuming 'tfidf_df' is your TF-IDF DataFrame\n",
    "# Create PCA object specifying the number of components\n",
    "n_components = 100  # Example number of components (adjust as needed)\n",
    "pca = PCA(n_components=n_components)\n",
    "\n",
    "# Fit PCA to your TF-IDF data\n",
    "pca.fit(tfidf_df)\n",
    "\n",
    "# Transform your TF-IDF data into the reduced feature space\n",
    "tfidf_reduced = pca.transform(tfidf_df)\n"
   ],
   "metadata": {
    "id": "gxYI6pkD_q9P",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760744883,
     "user_tz": 360,
     "elapsed": 10099,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    }
   },
   "execution_count": 43,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "# Assuming 'tfidf_reduced' is your transformed dataset after PCA\n",
    "import pandas as pd\n",
    "\n",
    "# Convert the transformed array into a DataFrame for better inspection (if not already in DataFrame format)\n",
    "df_reduced = pd.DataFrame(tfidf_reduced)\n",
    "\n",
    "# Display the first few rows to examine the reduced dimensions\n",
    "print(df_reduced.head())\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3qw6t7B_DTC3",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760750127,
     "user_tz": 360,
     "elapsed": 141,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "3d3a7a1a-1473-46a4-df66-d623739b750a"
   },
   "execution_count": 44,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "         0         1         2         3         4         5         6   \\\n",
      "0  0.090500 -0.040606  0.028588  0.001397 -0.022889 -0.022007  0.005762   \n",
      "1 -0.081842 -0.035420 -0.008939  0.031627 -0.031679 -0.022951  0.007635   \n",
      "2 -0.028373  0.004141  0.056549 -0.100895  0.071917  0.037702 -0.005294   \n",
      "3 -0.071760 -0.066717  0.056913 -0.059761  0.051206 -0.024110  0.008698   \n",
      "4 -0.062248 -0.008604 -0.045037  0.028408 -0.066850  0.091550  0.143935   \n",
      "\n",
      "         7         8         9   ...        90        91        92        93  \\\n",
      "0 -0.001022 -0.019084  0.084638  ...  0.033719 -0.036980  0.010754  0.009529   \n",
      "1 -0.043015 -0.040318 -0.001499  ... -0.021709 -0.030041 -0.011191 -0.002487   \n",
      "2  0.009985 -0.020544 -0.005841  ...  0.043701  0.016814  0.011782 -0.076484   \n",
      "3  0.013605 -0.003424 -0.089122  ...  0.030630 -0.001283 -0.031379  0.011318   \n",
      "4  0.046578  0.002926  0.040478  ...  0.043946  0.076858 -0.004490  0.052821   \n",
      "\n",
      "         94        95        96        97        98        99  \n",
      "0 -0.030139  0.055519  0.007553  0.062215  0.082322 -0.054760  \n",
      "1 -0.004505  0.003536 -0.011148  0.025443 -0.013441 -0.005027  \n",
      "2  0.041769  0.054022 -0.031860 -0.047841  0.023010 -0.010721  \n",
      "3  0.003456  0.013922  0.020616 -0.047895  0.026548  0.017618  \n",
      "4  0.058650  0.082879 -0.035490  0.021270  0.078490  0.014967  \n",
      "\n",
      "[5 rows x 100 columns]\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "# Extracting features (all columns except the last one assumed as target)\n",
    "X_features_df = df_reduced.iloc[:, :-1]  # Exclude the last column\n",
    "\n",
    "# Extracting the target variable (last column)\n",
    "y_target_df = df_reduced.iloc[:, -1]  # Select the last column\n",
    "\n",
    "# Optionally, convert DataFrames to arrays if needed\n",
    "X_features = X_features_df.values\n",
    "y_target = y_target_df.values\n"
   ],
   "metadata": {
    "id": "4GFW2IjPE-Cd",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702760767399,
     "user_tz": 360,
     "elapsed": 130,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    }
   },
   "execution_count": 45,
   "outputs": []
  },
  {
   "cell_type": "code",
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "\n",
    "# Splitting data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_features, y_target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize regression models\n",
    "linear_reg = LinearRegression()\n",
    "rf_regressor = RandomForestRegressor()\n",
    "\n",
    "# Train regression models on the training data\n",
    "linear_reg.fit(X_train, y_train)\n",
    "rf_regressor.fit(X_train, y_train)\n",
    "\n",
    "# Predict using the trained regression models\n",
    "linear_reg_preds = linear_reg.predict(X_test)\n",
    "rf_preds = rf_regressor.predict(X_test)\n",
    "\n",
    "# Evaluation metrics for regression\n",
    "def evaluate_regression_model(y_true, y_pred):\n",
    "    mse = mean_squared_error(y_true, y_pred)\n",
    "    mae = mean_absolute_error(y_true, y_pred)\n",
    "    r2 = r2_score(y_true, y_pred)\n",
    "    return mse, mae, r2\n",
    "\n",
    "# Evaluate Linear Regression\n",
    "mse_lr, mae_lr, r2_lr = evaluate_regression_model(y_test, linear_reg_preds)\n",
    "\n",
    "# Evaluate Random Forest Regressor\n",
    "mse_rf, mae_rf, r2_rf = evaluate_regression_model(y_test, rf_preds)\n",
    "\n",
    "# Display evaluation metrics\n",
    "print(\"Linear Regression Metrics:\")\n",
    "print(f\"Mean Squared Error: {mse_lr:.4f}, Mean Absolute Error: {mae_lr:.4f}, R^2 Score: {r2_lr:.4f}\\n\")\n",
    "\n",
    "print(\"Random Forest Regressor Metrics:\")\n",
    "print(f\"Mean Squared Error: {mse_rf:.4f}, Mean Absolute Error: {mae_rf:.4f}, R^2 Score: {r2_rf:.4f}\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "S2d_CGwMH0tX",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702755394613,
     "user_tz": 360,
     "elapsed": 132832,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "74e12447-c500-4f4d-c04b-9dd00fe24fb1"
   },
   "execution_count": 28,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Linear Regression Metrics:\n",
      "Mean Squared Error: 0.0012, Mean Absolute Error: 0.0255, R^2 Score: -0.0405\n",
      "\n",
      "Random Forest Regressor Metrics:\n",
      "Mean Squared Error: 0.0005, Mean Absolute Error: 0.0161, R^2 Score: 0.5482\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# Download NLTK resources (if not downloaded)\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "\n",
    "# Assuming 'tfidf_df' is your TF-IDF DataFrame\n",
    "# Create PCA object specifying the number of components\n",
    "n_components = 100  # Example number of components (adjust as needed)\n",
    "pca = PCA(n_components=n_components)\n",
    "\n",
    "# Fit PCA to your TF-IDF data\n",
    "pca.fit(tfidf_df)\n",
    "\n",
    "# Transform your TF-IDF data into the reduced feature space\n",
    "tfidf_reduced = pca.transform(tfidf_df)\n",
    "\n",
    "# Convert the transformed array into a DataFrame for better inspection (if not already in DataFrame format)\n",
    "df_reduced = pd.DataFrame(tfidf_reduced)\n",
    "\n",
    "# Assuming 'pca_df' is your DataFrame after PCA transformation\n",
    "# 'pca_df' contains both features and target variable\n",
    "\n",
    "# Extracting features (all columns except the last one assumed as target)\n",
    "X_features_df = df_reduced.iloc[:, :-1]  # Exclude the last column\n",
    "\n",
    "# Extracting the target variable (last column)\n",
    "y_target_df = df_reduced.iloc[:, -1]  # Select the last column\n",
    "\n",
    "# Optionally, convert DataFrames to arrays if needed\n",
    "X_features = X_features_df.values\n",
    "y_target = y_target_df.values\n",
    "\n",
    "# Splitting data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_features, y_target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize regression models\n",
    "linear_reg = LinearRegression()\n",
    "rf_regressor = RandomForestRegressor()\n",
    "\n",
    "# Train regression models on the training data\n",
    "linear_reg.fit(X_train, y_train)\n",
    "rf_regressor.fit(X_train, y_train)\n",
    "\n",
    "# Placeholder function for preprocessing a single tweet\n",
    "def preprocess(tweet):\n",
    "\n",
    "  tokens = word_tokenize(tweet)\n",
    "\n",
    "    # Remove punctuation and convert to lowercase\n",
    "  tokens = [word.lower() for word in tokens if word.isalpha()]\n",
    "\n",
    "    # Remove stopwords\n",
    "  stop_words = set(stopwords.words('english'))\n",
    "  tokens = [word for word in tokens if word not in stop_words]\n",
    "\n",
    "  # Lemmatization\n",
    "  lemmatizer = WordNetLemmatizer()\n",
    "  tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
    "\n",
    "  preprocessed_tweet = ' '.join(tokens)  #\n",
    "    # Your preprocessing steps here\n",
    "    # Tokenization, cleaning, removing stop words, etc.\n",
    "  return preprocessed_tweet\n",
    "\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.decomposition import PCA\n",
    "import pandas as pd\n",
    "\n",
    "# Example preprocessed tweets (replace this with your preprocessed tweets)\n",
    "preprocessed_tweets = [\n",
    "    \"this is an example tweet\",\n",
    "    \"another example of preprocessed tweet\"\n",
    "]\n",
    "\n",
    "# Initialize a TF-IDF Vectorizer\n",
    "vectorizer = TfidfVectorizer()\n",
    "\n",
    "# Fit and transform the preprocessed tweets to TF-IDF features\n",
    "tfidf_features = vectorizer.fit_transform(preprocessed_tweets)\n",
    "\n",
    "# Convert TF-IDF features to a DataFrame (optional for visualization or inspection)\n",
    "tfidf_df = pd.DataFrame(tfidf_features.toarray(), columns=vectorizer.get_feature_names_out())\n",
    "\n",
    "# Apply PCA transformation\n",
    "n_components = 100  # Example number of components\n",
    "pca = PCA(n_components=n_components)\n",
    "\n",
    "# Fit PCA to TF-IDF features\n",
    "pca.fit(tfidf_features.toarray())\n",
    "\n",
    "# Transform TF-IDF features into the reduced feature space using PCA\n",
    "tfidf_reduced = pca.transform(tfidf_features.toarray())\n",
    "\n",
    "# Now, 'tfidf_reduced' contains the TF-IDF features in a reduced dimensionality using PCA\n",
    "# You can use 'tfidf_reduced' for further analysis or modeling\n",
    "\n",
    "\n",
    "# Placeholder function for PCA transformation of a preprocessed tweet\n",
    "def pca_transform(preprocessed_tweet):\n",
    "\n",
    "  transformed_tweet = pca.transform(preprocessed_tweet)\n",
    "    # Your PCA transformation steps here\n",
    "    # Transform the preprocessed tweet into the reduced feature space\n",
    "  return transformed_tweet\n",
    "\n",
    "# Function to predict category for a given tweet\n",
    "def predict_category_for_tweet(tweet):\n",
    "    # Preprocess the tweet\n",
    "    preprocessed_tweet = preprocess(tweet)\n",
    "\n",
    "    # Transform the preprocessed tweet into the reduced feature space\n",
    "    transformed_tweet = pca_transform(preprocessed_tweet)\n",
    "\n",
    "    # Predict category using the trained regression models\n",
    "    linear_reg_category = linear_reg.predict(transformed_tweet)\n",
    "    rf_category = rf_regressor.predict(transformed_tweet)\n",
    "\n",
    "    return linear_reg_category, rf_category\n",
    "\n",
    "# Input a tweet from the user\n",
    "user_tweet = input(\"Enter a tweet: \")\n",
    "\n",
    "# Get predictions for the entered tweet\n",
    "linear_reg_pred, rf_pred = predict_category_for_tweet(user_tweet)\n",
    "\n",
    "# Display the predicted categories\n",
    "print(\"Linear Regression Predicted Category:\", linear_reg_pred)\n",
    "print(\"Random Forest Predicted Category:\", rf_pred)\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 584
    },
    "id": "ERfAn6RMZu4G",
    "executionInfo": {
     "status": "error",
     "timestamp": 1702761096910,
     "user_tz": 360,
     "elapsed": 208402,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "010ae0e9-d9e1-4749-be97-4af8064392e6"
   },
   "execution_count": 46,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stderr",
     "text": [
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a tweet: able\n"
     ]
    },
    {
     "output_type": "stream",
     "name": "stderr",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but PCA was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "output_type": "error",
     "ename": "ValueError",
     "evalue": "ignored",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mValueError\u001B[0m                                Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-46-433093a0f6e4>\u001B[0m in \u001B[0;36m<cell line: 104>\u001B[0;34m()\u001B[0m\n\u001B[1;32m    102\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    103\u001B[0m \u001B[0;31m# Get predictions for the entered tweet\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 104\u001B[0;31m \u001B[0mlinear_reg_pred\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mrf_pred\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpredict_category_for_tweet\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0muser_tweet\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    105\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    106\u001B[0m \u001B[0;31m# Display the predicted categories\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-46-433093a0f6e4>\u001B[0m in \u001B[0;36mpredict_category_for_tweet\u001B[0;34m(tweet)\u001B[0m\n\u001B[1;32m     90\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     91\u001B[0m     \u001B[0;31m# Transform the preprocessed tweet into the reduced feature space\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 92\u001B[0;31m     \u001B[0mtransformed_tweet\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpca_transform\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpreprocessed_tweet\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     93\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     94\u001B[0m     \u001B[0;31m# Predict category using the trained regression models\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-46-433093a0f6e4>\u001B[0m in \u001B[0;36mpca_transform\u001B[0;34m(preprocessed_tweet)\u001B[0m\n\u001B[1;32m     79\u001B[0m \u001B[0;32mdef\u001B[0m \u001B[0mpca_transform\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpreprocessed_tweet\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     80\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 81\u001B[0;31m   \u001B[0mtransformed_tweet\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpca\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtransform\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpreprocessed_tweet\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     82\u001B[0m     \u001B[0;31m# Your PCA transformation steps here\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     83\u001B[0m     \u001B[0;31m# Transform the preprocessed tweet into the reduced feature space\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\u001B[0m in \u001B[0;36mwrapped\u001B[0;34m(self, X, *args, **kwargs)\u001B[0m\n\u001B[1;32m    138\u001B[0m     \u001B[0;34m@\u001B[0m\u001B[0mwraps\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mf\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    139\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0mwrapped\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 140\u001B[0;31m         \u001B[0mdata_to_wrap\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mf\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    141\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0misinstance\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdata_to_wrap\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtuple\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    142\u001B[0m             \u001B[0;31m# only wrap the first output for cross decomposition\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/decomposition/_base.py\u001B[0m in \u001B[0;36mtransform\u001B[0;34m(self, X)\u001B[0m\n\u001B[1;32m    118\u001B[0m         \u001B[0mcheck_is_fitted\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    119\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 120\u001B[0;31m         \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_validate_data\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfloat64\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfloat32\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mreset\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    121\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmean_\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    122\u001B[0m             \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m \u001B[0;34m-\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmean_\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001B[0m in \u001B[0;36m_validate_data\u001B[0;34m(self, X, y, reset, validate_separately, **check_params)\u001B[0m\n\u001B[1;32m    563\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"Validation should be done on X, y or both.\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    564\u001B[0m         \u001B[0;32melif\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mno_val_X\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0mno_val_y\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 565\u001B[0;31m             \u001B[0mX\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcheck_array\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minput_name\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m\"X\"\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mcheck_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    566\u001B[0m             \u001B[0mout\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    567\u001B[0m         \u001B[0;32melif\u001B[0m \u001B[0mno_val_X\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mno_val_y\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001B[0m in \u001B[0;36mcheck_array\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001B[0m\n\u001B[1;32m    877\u001B[0m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mastype\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcopy\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    878\u001B[0m                 \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 879\u001B[0;31m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0m_asarray_with_order\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mxp\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    880\u001B[0m             \u001B[0;32mexcept\u001B[0m \u001B[0mComplexWarning\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0mcomplex_warning\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    881\u001B[0m                 raise ValueError(\n",
      "\u001B[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_array_api.py\u001B[0m in \u001B[0;36m_asarray_with_order\u001B[0;34m(array, dtype, order, copy, xp)\u001B[0m\n\u001B[1;32m    183\u001B[0m     \u001B[0;32mif\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__name__\u001B[0m \u001B[0;32min\u001B[0m \u001B[0;34m{\u001B[0m\u001B[0;34m\"numpy\"\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m\"numpy.array_api\"\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    184\u001B[0m         \u001B[0;31m# Use NumPy API to support order\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 185\u001B[0;31m         \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnumpy\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    186\u001B[0m         \u001B[0;32mreturn\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcopy\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mcopy\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    187\u001B[0m     \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mValueError\u001B[0m: could not convert string to float: 'able'"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load your dataset (replace 'dataset.csv' with your actual file)\n",
    "data = pd.read_csv('/content/train.csv')\n",
    "\n",
    "# Assuming 'text' column contains tweet text and 'target' contains categories\n",
    "\n",
    "# Split data into features (text) and target (categories)\n",
    "X = data['text']\n",
    "y = data['target']\n",
    "\n",
    "# Vectorize the text using TF-IDF\n",
    "vectorizer = TfidfVectorizer()\n",
    "X_vectorized = vectorizer.fit_transform(X)\n",
    "\n",
    "# Split data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train a Logistic Regression model\n",
    "model = LogisticRegression(max_iter=1000)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluate model performance\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.2f}\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rIgb0bxbghy8",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702761747743,
     "user_tz": 360,
     "elapsed": 919,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "b2450659-d4b7-4af0-9af1-8618bd6da65b"
   },
   "execution_count": 47,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Accuracy: 0.80\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "# Assuming 'new_tweet' is the new tweet entered by the user\n",
    "new_tweet = \"disaster\"\n",
    "\n",
    "# Preprocess the new tweet and vectorize it using the same vectorizer used during training\n",
    "new_tweet_vectorized = vectorizer.transform([new_tweet])\n",
    "\n",
    "# Predict category of the new tweet\n",
    "predicted_category = model.predict(new_tweet_vectorized)\n",
    "print(f\"Predicted Category: {predicted_category[0]}\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "47HhXN_3gmOO",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702761801049,
     "user_tz": 360,
     "elapsed": 140,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "75fd8d20-52ff-4385-f6cb-b7587d2867e8"
   },
   "execution_count": 50,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Predicted Category: 1\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [
    "# Assuming 'new_tweet' is the new tweet entered by the user\n",
    "new_tweet = \"wonderful\"\n",
    "\n",
    "# Preprocess the new tweet and vectorize it using the same vectorizer used during training\n",
    "new_tweet_vectorized = vectorizer.transform([new_tweet])\n",
    "\n",
    "# Predict category of the new tweet\n",
    "predicted_category = model.predict(new_tweet_vectorized)\n",
    "print(f\"Predicted Category: {predicted_category[0]}\")\n"
   ],
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "RtCSwnJgg0Kn",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1702761921246,
     "user_tz": 360,
     "elapsed": 146,
     "user": {
      "displayName": "pavanmahaveer singara",
      "userId": "17551489007904463854"
     }
    },
    "outputId": "f80ad5b5-3741-4690-addf-3f8121e5f9d5"
   },
   "execution_count": 51,
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Predicted Category: 0\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "source": [],
   "metadata": {
    "id": "wxlGUVyYhPl7"
   },
   "execution_count": null,
   "outputs": []
  }
 ]
}
